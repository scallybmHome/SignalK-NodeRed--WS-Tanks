[
    {
        "id": "3ef1c926.ba7526",
        "type": "websocket in",
        "z": "8bdea88.abe9658",
        "name": "",
        "server": "",
        "client": "f35e03a1.d409e",
        "x": 240,
        "y": 440,
        "wires": [
            [
                "3ec9d9d6.6d1a76"
            ]
        ]
    },
    {
        "id": "fa5ec11.4c3e64",
        "type": "switch",
        "z": "8bdea88.abe9658",
        "name": "Hello?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "\"signalk-server\"",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 440,
        "wires": [
            [
                "b28b4911.8890f8",
                "c1b66747.2e1928"
            ],
            [
                "1cdf665b.f9d81a"
            ]
        ]
    },
    {
        "id": "1cdf665b.f9d81a",
        "type": "json",
        "z": "8bdea88.abe9658",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 910,
        "y": 440,
        "wires": [
            [
                "e4ee8028.95dbc",
                "6cab1446.eebddc"
            ]
        ]
    },
    {
        "id": "5f797a98.a87954",
        "type": "debug",
        "z": "8bdea88.abe9658",
        "d": true,
        "name": "Debug point to look at the parsed deltas",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 440,
        "wires": []
    },
    {
        "id": "49f06ba5.4ceb44",
        "type": "websocket out",
        "z": "8bdea88.abe9658",
        "name": "",
        "server": "",
        "client": "f35e03a1.d409e",
        "x": 1280,
        "y": 280,
        "wires": []
    },
    {
        "id": "b7ea93f4.a8669",
        "type": "function",
        "z": "8bdea88.abe9658",
        "name": "Check the times function - making sure readings are current",
        "func": "led_state = false; // false makes the LED red\nreading_bound = 300000; //in ms , this sets the tollerance AND lockout for bad readings.\n\n//the time of the reading\nreadingTime = msg.payload.updates[0].timestamp;\n\n//the last bad reading\nlastBadReading = flow.get(\"locals.lastBadReading\");\n\n//the present time acording to the node red server\n//this may drift unless all your devices are time locked. THEY ARE of course time locked.\ncurrentTime =  Date.now();\n\n//work out the time deltas\ntimeFromLastBadReading = new Date(lastBadReading).getTime() - currentTime;\ntimeFromLastMeasurement = new Date(readingTime).getTime() - currentTime;\n\nif ( timeFromLastBadReading <= -reading_bound){\n    \n     if ( timeFromLastMeasurement <= -reading_bound){\n         //we have a reading time out\n        led_state = false;\n        flow.set(\"locals.lastBadReading\", currentTime);\n    }\n    else\n    {\n        //all is good set the led green\n        led_state = true;\n    }\n}\nelse\n{\n   //we have seen a reading gap leave the LED on red\n    led_state = false;\n}\n\n//set the outputs\n\nmsg.payload = led_state;\n//for debug I output the time deltaa\n//msg.debug = \"Time to reading -\" + timeFromLastMeasurement.toString(10) + \"  Time to last bad reading -\" + timeFromLastBadReading.toString(10);\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1440,
        "y": 600,
        "wires": [
            [
                "810ee0cd.d8ef3",
                "6719b887.ce5a38"
            ]
        ]
    },
    {
        "id": "dffde80f.011018",
        "type": "ui_gauge",
        "z": "8bdea88.abe9658",
        "name": "",
        "group": "5efb96f.ad0a568",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{guageName}}",
        "label": "",
        "format": "{{payload}} {{unit}}",
        "min": "0",
        "max": "1",
        "colors": [
            "#b30000",
            "#f00000",
            "#59cb3a"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1750,
        "y": 700,
        "wires": []
    },
    {
        "id": "19782ce3.c54e13",
        "type": "ui_gauge",
        "z": "8bdea88.abe9658",
        "name": "",
        "group": "5efb96f.ad0a568",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Tank2",
        "label": "",
        "format": "{{payload}} {{unit}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b30000",
            "#e6e600",
            "#59cb3a"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1750,
        "y": 740,
        "wires": []
    },
    {
        "id": "dac22c38.b454f",
        "type": "ui_gauge",
        "z": "8bdea88.abe9658",
        "name": "",
        "group": "5efb96f.ad0a568",
        "order": 4,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Tank3",
        "label": "",
        "format": "{{payload}} {{unit}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b30000",
            "#e6e600",
            "#59cb3a"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1750,
        "y": 780,
        "wires": []
    },
    {
        "id": "f8ff0076.91c38",
        "type": "ui_gauge",
        "z": "8bdea88.abe9658",
        "name": "",
        "group": "c516dbf3.170108",
        "order": 6,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Stern Holding",
        "label": "",
        "format": "{{payload}} {{unit}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#1dcb3a",
            "#e6e600",
            "#b30000"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1720,
        "y": 820,
        "wires": []
    },
    {
        "id": "2d20ac1f.0e0234",
        "type": "ui_gauge",
        "z": "8bdea88.abe9658",
        "name": "",
        "group": "c516dbf3.170108",
        "order": 6,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Bow Holding",
        "label": "",
        "format": "{{payload}} {{unit}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b30000",
            "#e6e600",
            "#59cb3a"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1730,
        "y": 860,
        "wires": []
    },
    {
        "id": "ca82c03e.ef8aa",
        "type": "ui_gauge",
        "z": "8bdea88.abe9658",
        "name": "",
        "group": "4731fe37.3174b",
        "order": 6,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Fuel",
        "label": "",
        "format": "{{payload}} {{unit}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b30000",
            "#e6e600",
            "#59cb3a"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1750,
        "y": 900,
        "wires": []
    },
    {
        "id": "810ee0cd.d8ef3",
        "type": "ui_led",
        "z": "8bdea88.abe9658",
        "order": 1,
        "group": "78118053.d1a01",
        "width": 0,
        "height": 0,
        "label": "Reading recent ",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1750,
        "y": 600,
        "wires": []
    },
    {
        "id": "2684a329.d67c1c",
        "type": "switch",
        "z": "8bdea88.abe9658",
        "name": "Sort between capacity and currentLevel",
        "property": "payload.updates[0].values[0].path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "capacity",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "currentLevel",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 560,
        "wires": [
            [
                "4541ce3f.2ed4e"
            ],
            [
                "9f8633d0.3e5b9",
                "b7ea93f4.a8669",
                "90e89d4c.91154",
                "83537c16.c2ba4",
                "c49a8c6f.afe9a",
                "4ceab297.09683c",
                "be397dae.f07a8",
                "a9e26204.5970d"
            ]
        ]
    },
    {
        "id": "e4ee8028.95dbc",
        "type": "link out",
        "z": "8bdea88.abe9658",
        "name": "",
        "links": [
            "a968f2d7.fd908"
        ],
        "x": 1015,
        "y": 400,
        "wires": []
    },
    {
        "id": "a968f2d7.fd908",
        "type": "link in",
        "z": "8bdea88.abe9658",
        "name": "",
        "links": [
            "e4ee8028.95dbc"
        ],
        "x": 35,
        "y": 560,
        "wires": [
            [
                "e65295bf.5580e8"
            ]
        ]
    },
    {
        "id": "b28b4911.8890f8",
        "type": "change",
        "z": "8bdea88.abe9658",
        "name": "Subscribe JSON",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"context\":\"vessels.self\",\"subscribe\":[{\"path\":\"tanks.*\",\"period\":60000}]}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 280,
        "wires": [
            [
                "49f06ba5.4ceb44"
            ]
        ]
    },
    {
        "id": "e96ce651.e02e48",
        "type": "comment",
        "z": "8bdea88.abe9658",
        "name": "You have to subscribe to a data leaf OR to a wildcard  'tanks' does not work",
        "info": "",
        "x": 1120,
        "y": 240,
        "wires": []
    },
    {
        "id": "c4e4a9d.fcbdc58",
        "type": "comment",
        "z": "8bdea88.abe9658",
        "name": "Node-Red ism the _session data is NOT carried in the msg",
        "info": "Leaving the _session data in the message confuses the WS nodes and no data is passed.",
        "x": 570,
        "y": 400,
        "wires": []
    },
    {
        "id": "3ec9d9d6.6d1a76",
        "type": "change",
        "z": "8bdea88.abe9658",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "_session",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 440,
        "wires": [
            [
                "fa5ec11.4c3e64"
            ]
        ]
    },
    {
        "id": "e65295bf.5580e8",
        "type": "switch",
        "z": "8bdea88.abe9658",
        "name": "Only take the data from the YDEN interface",
        "property": "payload.updates[0].$source",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "YDEN",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 250,
        "y": 560,
        "wires": [
            [
                "2684a329.d67c1c"
            ]
        ]
    },
    {
        "id": "4541ce3f.2ed4e",
        "type": "function",
        "z": "8bdea88.abe9658",
        "name": "Update the capacity values for the tanks",
        "func": "if ( msg.payload.updates[0].$source.includes(flow.get(\"freshwater[0].SerialNo\")) )\n{\n    flow.set(\"freshwater[0].capacity\", msg.payload.updates[0].values[0].value);\n}\n\nif (msg.payload.updates[0].$source.includes(flow.get(\"freshwater[1].SerialNo\")) )\n{\n    flow.set(\"freshwater[1].capacity\", msg.payload.updates[0].values[0].value);\n}\n\nif ( msg.payload.updates[0].$source.includes(flow.get(\"freshwater[2].SerialNo\")) )\n{\n    flow.set(\"freshwater[2].capacity\", msg.payload.updates[0].values[0].value);\n}\n\nif ( msg.payload.updates[0].$source.includes(flow.get(\"blackwater[0].SerialNo\")) )\n{\n    flow.set(\"blackwater[0].capacity\", msg.payload.updates[0].values[0].value);\n}\n\nif ( msg.payload.updates[0].$source.includes(flow.get(\"blackwater[1].SerialNo\")) )\n{\n    flow.set(\"blackwater[1].capacity\", msg.payload.updates[0].values[0].value);\n}\n\nif ( msg.payload.updates[0].$source.includes(flow.get(\"fuel[0].SerialNo\")) )\n{\n    flow.set(\"fuel[0].capacity\", msg.payload.updates[0].values[0].value);\n}\n\nreturn msg;\n\npayload.updates[0].$source",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1060,
        "y": 520,
        "wires": [
            [
                "859cdc3d.d2028",
                "b451daf.9326b28"
            ]
        ]
    },
    {
        "id": "c1b66747.2e1928",
        "type": "change",
        "z": "8bdea88.abe9658",
        "name": "freshwater",
        "rules": [
            {
                "t": "set",
                "p": "freshwater",
                "pt": "flow",
                "to": "[{\"SerialNo\":\"0b99\",\"Name\":\"Potable 1\",\"capacity\":0},{\"SerialNo\":\"0bce\",\"Name\":\"Potable 2\",\"capacity\":0},{\"SerialNo\":\"02f8\",\"Name\":\"Potable 3\",\"capacity\":0}]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 360,
        "wires": [
            [
                "5dc17dcb.112114"
            ]
        ]
    },
    {
        "id": "5dc17dcb.112114",
        "type": "change",
        "z": "8bdea88.abe9658",
        "name": "blackwater",
        "rules": [
            {
                "t": "set",
                "p": "blackwater",
                "pt": "flow",
                "to": "[{\"SerialNo\":\"ff56\",\"Name\":\"Stern Holding\",\"capacity\":0},{\"SerialNo\":\"ff65\",\"Name\":\"Bow Holding\",\"capacity\":0}]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 360,
        "wires": [
            [
                "113dfd7b.781c43"
            ]
        ]
    },
    {
        "id": "113dfd7b.781c43",
        "type": "change",
        "z": "8bdea88.abe9658",
        "name": "fuel",
        "rules": [
            {
                "t": "set",
                "p": "fuel",
                "pt": "flow",
                "to": "[{\"SerialNo\":\"02e3\",\"Name\":\"Fuel\",\"capacity\":0}]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 360,
        "wires": [
            [
                "67aebb64.0d6db4"
            ]
        ]
    },
    {
        "id": "43a71117.3bdf3",
        "type": "comment",
        "z": "8bdea88.abe9658",
        "name": "A branch that set up the static infomration, I set this up statically in the flow",
        "info": "",
        "x": 1120,
        "y": 320,
        "wires": []
    },
    {
        "id": "16f82da6.9554c2",
        "type": "comment",
        "z": "8bdea88.abe9658",
        "name": "This could be a switch and change block,  but I found the if statements more readable.",
        "info": "",
        "x": 1070,
        "y": 480,
        "wires": []
    },
    {
        "id": "7d46d949.b5f378",
        "type": "debug",
        "z": "8bdea88.abe9658",
        "d": true,
        "name": "debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 480,
        "wires": []
    },
    {
        "id": "859cdc3d.d2028",
        "type": "change",
        "z": "8bdea88.abe9658",
        "d": true,
        "name": "debug inspection of change output",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "fuel",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1540,
        "y": 480,
        "wires": [
            [
                "7d46d949.b5f378"
            ]
        ]
    },
    {
        "id": "e4c1c855.33bd68",
        "type": "change",
        "z": "8bdea88.abe9658",
        "d": true,
        "name": " inspection of initial setup",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "fuel",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1550,
        "y": 360,
        "wires": [
            [
                "d67dcdc2.fc9f4"
            ]
        ]
    },
    {
        "id": "d67dcdc2.fc9f4",
        "type": "debug",
        "z": "8bdea88.abe9658",
        "d": true,
        "name": "debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 360,
        "wires": []
    },
    {
        "id": "9f8633d0.3e5b9",
        "type": "debug",
        "z": "8bdea88.abe9658",
        "d": true,
        "name": "Debug point to look at the filtered value deltas",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 560,
        "wires": []
    },
    {
        "id": "29a80d39.b1f242",
        "type": "comment",
        "z": "8bdea88.abe9658",
        "name": "Just ensuring the data id from my primary data path",
        "info": "",
        "x": 230,
        "y": 520,
        "wires": []
    },
    {
        "id": "67aebb64.0d6db4",
        "type": "function",
        "z": "8bdea88.abe9658",
        "name": "locals",
        "func": "flow.set(\"locals.guagesRelative\",false);\nflow.set(\"locals.lastBadReading\",new Date(1970, 1, 2, 00, 00, 00, 00));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1350,
        "y": 360,
        "wires": [
            [
                "e4c1c855.33bd68"
            ]
        ]
    },
    {
        "id": "6719b887.ce5a38",
        "type": "debug",
        "z": "8bdea88.abe9658",
        "d": true,
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 640,
        "wires": []
    },
    {
        "id": "90e89d4c.91154",
        "type": "function",
        "z": "8bdea88.abe9658",
        "name": "Generate Display",
        "func": "//which tank do we want\nDisplayWaterTank=1;\n\n//copy the flow to local variables for readbility\nDisplayWaterTank--;\ntankSerialNo = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].SerialNo\")\n\nif ( !(msg.payload.updates[0].$source.includes(tankSerialNo) )){\n    //this delta isn't for this guage.  Lets terminate the flow here.\n    msg = {};\n    node.done;\n}\nelse\n{\n    //since we have the correct tank lets pull the information local to improve readabilit\n    tankCapacity = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].capacity\")\n    tankName = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].Name\")\n\n    //set some local limits for colouring the guage different colours.  This translates is arbitary\n    seg1b=0.05;\n    seg2b=0.15; \n\n    //pull the level out of the tank from the data packet.\n    tankCurrentLevel = msg.payload.updates[0].values[0].value; //current level of the tank\n\n    //label the guage with the name set up in the config run\n    msg.guageName = tankName;\n    \n    //guages relative - if l confuse you ;-)  The guages only change when there is an update so it might take\n    //5min to get the update\n    if (global.get(\"Guages_Relative\") == true)\n    {\n        msg.payload = (tankCurrentLevel*100).toFixed(0);\n        msg.unit=\"%\";\n        guage_min = 0\n        guage_max = 100\n        seg1= seg1b*guage_max;\n        seg2= seg2b*guage_max;\n    }\n    else\n    {\n        //guage absolute the capacity is converted to l,  this is where you gould pick another unit.\n        \n        //conversion=1; //you like cubig meters\n        conversion=1000; //liters in a cubic meter\n        //conversion=264.17; //us gallons in a cubic meter \n        \n        msg.payload = (tankCurrentLevel*tankCapacity*conversion).toFixed(0);\n        //msg.unit=\"m^3\";\n        msg.unit=\"l\";\n        //msg.unit=\"US Gal\";\n        guage_min = 0\n        guage_max = (tankCapacity*conversion).toFixed(0)\n        seg1= seg1b* guage_max;\n        seg2= seg2b*guage_max;\n    }\n    \n    //set th\n    msg.ui_control = {\n        \"min\":guage_min,\n        \"max\":guage_max,\n        \"seg1\":seg1,\n        \"seg2\":seg2,\n        \"options\":{\"levelColors\":[\"#b30000\", \"#e6e600\", \"#59cb3a\"]}\n    }\n    \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 700,
        "wires": [
            [
                "dffde80f.011018"
            ]
        ]
    },
    {
        "id": "6cab1446.eebddc",
        "type": "switch",
        "z": "8bdea88.abe9658",
        "d": true,
        "name": "Debug filter",
        "property": "payload.updates[0].values[0].path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "blackWater",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1280,
        "y": 440,
        "wires": [
            [
                "5f797a98.a87954"
            ]
        ]
    },
    {
        "id": "b451daf.9326b28",
        "type": "switch",
        "z": "8bdea88.abe9658",
        "d": true,
        "name": "Debug filter",
        "property": "payload.updates[0].values[0].path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "fuel",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 520,
        "wires": [
            [
                "ddd63845.f4c618"
            ]
        ]
    },
    {
        "id": "ddd63845.f4c618",
        "type": "debug",
        "z": "8bdea88.abe9658",
        "d": true,
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 520,
        "wires": []
    },
    {
        "id": "83537c16.c2ba4",
        "type": "function",
        "z": "8bdea88.abe9658",
        "name": "Generate Display",
        "func": "//which tank do we want\nDisplayFuelTank=1;\n\n//copy the flow to local variables for readbility\nDisplayFuelTank--;\ntankSerialNo = flow.get(\"fuel[\"+DisplayFuelTank.toString(10)+\"].SerialNo\")\n\nif ( !(msg.payload.updates[0].$source.includes(tankSerialNo) )){\n    //this delta isn't for this guage.  Lets terminate the flow here.\n    msg = {};\n    node.done;\n}\nelse\n{\n    tankCapacity = flow.get(\"fuel[\"+DisplayFuelTank.toString(10)+\"].capacity\")\n    tankName = flow.get(\"fuel[\"+DisplayFuelTank.toString(10)+\"].Name\")\n    //set some local limits for colouring the guage different colours\n    seg1b=0.05;\n    seg2b=0.15; \n    tankCurrentLevel = msg.payload.updates[0].values[0].value; //current level of the tank\n    msg.guageName = tankName;\n    if (global.get(\"Guages_Relative\") == true)\n    {\n        msg.payload = (tankCurrentLevel*100).toFixed(0);\n        msg.unit=\"%\";\n        guage_min = 0\n        guage_max = 100\n        seg1= seg1b*guage_max;\n        seg2= seg2b*guage_max;\n    }\n    else\n    {\n        msg.payload = (tankCurrentLevel*tankCapacity*1000).toFixed(0);\n        msg.unit=\"l\";\n        guage_min = 0\n        guage_max = (tankCapacity*1000).toFixed(0)\n        seg1= seg1b* guage_max;\n        seg2= seg2b*guage_max;\n    }\n    msg.ui_control = {\n        \"min\":guage_min,\n        \"max\":guage_max,\n        \"seg1\":seg1,\n        \"seg2\":seg2,\n        \"options\":{\"levelColors\":[\"#b30000\", \"#e6e600\", \"#59cb3a\"]}\n    }\n    \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 900,
        "wires": [
            [
                "ca82c03e.ef8aa"
            ]
        ]
    },
    {
        "id": "c49a8c6f.afe9a",
        "type": "function",
        "z": "8bdea88.abe9658",
        "name": "Generate Display",
        "func": "//which tank do we want\nDisplayWaterTank=2;\n\n//copy the flow to local variables for readbility\nDisplayWaterTank--;\ntankSerialNo = flow.get(\"blackwater[\"+DisplayWaterTank.toString(10)+\"].SerialNo\")\n\nif ( !(msg.payload.updates[0].$source.includes(tankSerialNo) )){\n    //this delta isn't for this guage.  Lets terminate the flow here.\n    msg = {};\n    node.done;\n}\nelse\n{\n    tankCapacity = flow.get(\"blackwater[\"+DisplayWaterTank.toString(10)+\"].capacity\")\n    tankName = flow.get(\"blackwater[\"+DisplayWaterTank.toString(10)+\"].Name\")\n    //set some local limits for colouring the guage different colours\n    seg1b=0.05;\n    seg2b=0.15; \n    tankCurrentLevel = msg.payload.updates[0].values[0].value; //current level of the tank\n    msg.guageName = tankName;\n    if (global.get(\"Guages_Relative\") == true)\n    {\n        msg.payload = (tankCurrentLevel*100).toFixed(0);\n        msg.unit=\"%\";\n        guage_min = 0\n        guage_max = 100\n        seg1= seg1b*guage_max;\n        seg2= seg2b*guage_max;\n    }\n    else\n    {\n        msg.payload = (tankCurrentLevel*tankCapacity*1000).toFixed(0);\n        msg.unit=\"l\";\n        guage_min = 0\n        guage_max = (tankCapacity*1000).toFixed(0)\n        seg1= seg1b* guage_max;\n        seg2= seg2b*guage_max;\n    }\n    msg.ui_control = {\n        \"min\":guage_min,\n        \"max\":guage_max,\n        \"seg1\":seg1,\n        \"seg2\":seg2,\n        \"options\":{\"levelColors\":[\"#b30000\", \"#e6e600\", \"#59cb3a\"]}\n    }\n    \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 860,
        "wires": [
            [
                "2d20ac1f.0e0234"
            ]
        ]
    },
    {
        "id": "4ceab297.09683c",
        "type": "function",
        "z": "8bdea88.abe9658",
        "name": "Generate Display",
        "func": "//which tank do we want\nDisplayWaterTank=1;\n\n//copy the flow to local variables for readbility\nDisplayWaterTank--;\ntankSerialNo = flow.get(\"blackwater[\"+DisplayWaterTank.toString(10)+\"].SerialNo\")\n\nif ( !(msg.payload.updates[0].$source.includes(tankSerialNo) )){\n    //this delta isn't for this guage.  Lets terminate the flow here.\n    msg = {};\n    node.done;\n}\nelse\n{\n    tankCapacity = flow.get(\"blackwater[\"+DisplayWaterTank.toString(10)+\"].capacity\")\n    tankName = flow.get(\"blackwater[\"+DisplayWaterTank.toString(10)+\"].Name\")\n    //set some local limits for colouring the guage different colours\n    seg1b=0.05;\n    seg2b=0.15; \n    tankCurrentLevel = msg.payload.updates[0].values[0].value; //current level of the tank\n    msg.guageName = tankName;\n    if (global.get(\"Guages_Relative\") == true)\n    {\n        msg.payload = (tankCurrentLevel*100).toFixed(0);\n        msg.unit=\"%\";\n        guage_min = 0\n        guage_max = 100\n        seg1= seg1b*guage_max;\n        seg2= seg2b*guage_max;\n    }\n    else\n    {\n        msg.payload = (tankCurrentLevel*tankCapacity*1000).toFixed(0);\n        msg.unit=\"l\";\n        guage_min = 0\n        guage_max = (tankCapacity*1000).toFixed(0)\n        seg1= seg1b* guage_max;\n        seg2= seg2b*guage_max;\n    }\n    msg.ui_control = {\n        \"min\":guage_min,\n        \"max\":guage_max,\n        \"seg1\":seg1,\n        \"seg2\":seg2,\n        \"options\":{\"levelColors\":[\"#b30000\", \"#e6e600\", \"#59cb3a\"]}\n    }\n    \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 820,
        "wires": [
            [
                "f8ff0076.91c38"
            ]
        ]
    },
    {
        "id": "be397dae.f07a8",
        "type": "function",
        "z": "8bdea88.abe9658",
        "name": "Generate Display",
        "func": "//which tank do we want\nDisplayWaterTank=3;\n\n//copy the flow to local variables for readbility\nDisplayWaterTank--;\ntankSerialNo = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].SerialNo\")\n\nif ( !(msg.payload.updates[0].$source.includes(tankSerialNo) )){\n    //this delta isn't for this guage.  Lets terminate the flow here.\n    msg = {};\n    node.done;\n}\nelse\n{\n    //since we have the correct tank lets pull the information local to improve readabilit\n    tankCapacity = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].capacity\")\n    tankName = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].Name\")\n\n    //set some local limits for colouring the guage different colours.  This translates is arbitary\n    seg1b=0.05;\n    seg2b=0.15; \n\n    //pull the level out of the tank from the data packet.\n    tankCurrentLevel = msg.payload.updates[0].values[0].value; //current level of the tank\n\n    //label the guage with the name set up in the config run\n    msg.guageName = tankName;\n    \n    //guages relative - if l confuse you ;-)  The guages only change when there is an update so it might take\n    //5min to get the update\n    if (global.get(\"Guages_Relative\") == true)\n    {\n        msg.payload = (tankCurrentLevel*100).toFixed(0);\n        msg.unit=\"%\";\n        guage_min = 0\n        guage_max = 100\n        seg1= seg1b*guage_max;\n        seg2= seg2b*guage_max;\n    }\n    else\n    {\n        //guage absolute the capacity is converted to l,  this is where you gould pick another unit.\n        \n        //conversion=1; //you like cubig meters\n        conversion=1000; //liters in a cubic meter\n        //conversion=264.17; //us gallons in a cubic meter \n        \n        msg.payload = (tankCurrentLevel*tankCapacity*conversion).toFixed(0);\n        //msg.unit=\"m^3\";\n        msg.unit=\"l\";\n        //msg.unit=\"US Gal\";\n        guage_min = 0\n        guage_max = (tankCapacity*conversion).toFixed(0)\n        seg1= seg1b* guage_max;\n        seg2= seg2b*guage_max;\n    }\n    \n    //set th\n    msg.ui_control = {\n        \"min\":guage_min,\n        \"max\":guage_max,\n        \"seg1\":seg1,\n        \"seg2\":seg2,\n        \"options\":{\"levelColors\":[\"#b30000\", \"#e6e600\", \"#59cb3a\"]}\n    }\n    \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 780,
        "wires": [
            [
                "dac22c38.b454f"
            ]
        ]
    },
    {
        "id": "a9e26204.5970d",
        "type": "function",
        "z": "8bdea88.abe9658",
        "name": "Generate Display",
        "func": "//which tank do we want\nDisplayWaterTank=2;\n\n//copy the flow to local variables for readbility\nDisplayWaterTank--;\ntankSerialNo = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].SerialNo\")\n\nif ( !(msg.payload.updates[0].$source.includes(tankSerialNo) )){\n    //this delta isn't for this guage.  Lets terminate the flow here.\n    msg = {};\n    node.done;\n}\nelse\n{\n    //since we have the correct tank lets pull the information local to improve readabilit\n    tankCapacity = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].capacity\")\n    tankName = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].Name\")\n\n    //set some local limits for colouring the guage different colours.  This translates is arbitary\n    seg1b=0.05;\n    seg2b=0.15; \n\n    //pull the level out of the tank from the data packet.\n    tankCurrentLevel = msg.payload.updates[0].values[0].value; //current level of the tank\n\n    //label the guage with the name set up in the config run\n    msg.guageName = tankName;\n    \n    //guages relative - if l confuse you ;-)  The guages only change when there is an update so it might take\n    //5min to get the update\n    if (global.get(\"Guages_Relative\") == true)\n    {\n        msg.payload = (tankCurrentLevel*100).toFixed(0);\n        msg.unit=\"%\";\n        guage_min = 0\n        guage_max = 100\n        seg1= seg1b*guage_max;\n        seg2= seg2b*guage_max;\n    }\n    else\n    {\n        //guage absolute the capacity is converted to l,  this is where you gould pick another unit.\n        \n        //conversion=1; //you like cubig meters\n        conversion=1000; //liters in a cubic meter\n        //conversion=264.17; //us gallons in a cubic meter \n        \n        msg.payload = (tankCurrentLevel*tankCapacity*conversion).toFixed(0);\n        //msg.unit=\"m^3\";\n        msg.unit=\"l\";\n        //msg.unit=\"US Gal\";\n        guage_min = 0\n        guage_max = (tankCapacity*conversion).toFixed(0)\n        seg1= seg1b* guage_max;\n        seg2= seg2b*guage_max;\n    }\n    \n    //set th\n    msg.ui_control = {\n        \"min\":guage_min,\n        \"max\":guage_max,\n        \"seg1\":seg1,\n        \"seg2\":seg2,\n        \"options\":{\"levelColors\":[\"#b30000\", \"#e6e600\", \"#59cb3a\"]}\n    }\n    \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 740,
        "wires": [
            [
                "19782ce3.c54e13"
            ]
        ]
    },
    {
        "id": "f35e03a1.d409e",
        "type": "websocket-client",
        "path": "ws://192.168.1.16:80/signalk/v1/stream?subscribe=none",
        "tls": "",
        "wholemsg": "false"
    },
    {
        "id": "5efb96f.ad0a568",
        "type": "ui_group",
        "name": "Potable Water",
        "tab": "147c3c11.3cdf74",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c516dbf3.170108",
        "type": "ui_group",
        "name": "Black Water",
        "tab": "147c3c11.3cdf74",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "4731fe37.3174b",
        "type": "ui_group",
        "name": "Fuel ",
        "tab": "147c3c11.3cdf74",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "78118053.d1a01",
        "type": "ui_group",
        "name": "Status",
        "tab": "147c3c11.3cdf74",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "147c3c11.3cdf74",
        "type": "ui_tab",
        "name": "Tanks",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    }
]