[
    {
        "id": "63cc2dcb.d9b554",
        "type": "json",
        "z": "cf96057a.038f88",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 910,
        "y": 280,
        "wires": [
            [
                "88fd24e8.13b248",
                "cec864ad.eba798"
            ]
        ]
    },
    {
        "id": "4f18d0b3.155d6",
        "type": "debug",
        "z": "cf96057a.038f88",
        "name": "Debug point to look at the parsed deltas",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 240,
        "wires": []
    },
    {
        "id": "d3ba4d95.5e7c5",
        "type": "function",
        "z": "cf96057a.038f88",
        "name": "Check the times function - making sure readings are current",
        "func": "\nreadingTime =new Date(msg.timestamp).getTime();\nif (flow.get(\"locals.lastGoodReading\") < readingTime )\n{\n    flow.set(\"locals.lastGoodReading\",readingTime);\n}\n//node.done;\n\nmsg.debug0 = readingTime;\nmsg.debug1 = msg.timestamp;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1440,
        "y": 520,
        "wires": [
            [
                "84e42de6.43255"
            ]
        ]
    },
    {
        "id": "5f6b93b6.74c0ac",
        "type": "ui_gauge",
        "z": "cf96057a.038f88",
        "name": "",
        "group": "5efb96f.ad0a568",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{guageName}}",
        "label": "",
        "format": "{{payload}} {{unit}}",
        "min": "0",
        "max": "1",
        "colors": [
            "#b30000",
            "#f00000",
            "#59cb3a"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1750,
        "y": 600,
        "wires": []
    },
    {
        "id": "da9784b0.77a498",
        "type": "ui_gauge",
        "z": "cf96057a.038f88",
        "name": "",
        "group": "5efb96f.ad0a568",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{guageName}}",
        "label": "",
        "format": "{{payload}} {{unit}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b30000",
            "#e6e600",
            "#59cb3a"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1750,
        "y": 640,
        "wires": []
    },
    {
        "id": "3a57519e.6cecbe",
        "type": "ui_gauge",
        "z": "cf96057a.038f88",
        "name": "",
        "group": "5efb96f.ad0a568",
        "order": 4,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{guageName}}",
        "label": "",
        "format": "{{payload}} {{unit}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b30000",
            "#e6e600",
            "#59cb3a"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1750,
        "y": 680,
        "wires": []
    },
    {
        "id": "309a63a1.84f35c",
        "type": "ui_gauge",
        "z": "cf96057a.038f88",
        "name": "",
        "group": "c516dbf3.170108",
        "order": 6,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{guageName}}",
        "label": "",
        "format": "{{payload}} {{unit}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#1dcb3a",
            "#e6e600",
            "#b30000"
        ],
        "seg1": "33",
        "seg2": "66",
        "x": 1750,
        "y": 720,
        "wires": []
    },
    {
        "id": "187c4a26.4a7e96",
        "type": "ui_gauge",
        "z": "cf96057a.038f88",
        "name": "",
        "group": "c516dbf3.170108",
        "order": 6,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{guageName}}",
        "label": "",
        "format": "{{payload}} {{unit}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b30000",
            "#e6e600",
            "#59cb3a"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1750,
        "y": 760,
        "wires": []
    },
    {
        "id": "a0adb310.f6701",
        "type": "ui_gauge",
        "z": "cf96057a.038f88",
        "name": "",
        "group": "4731fe37.3174b",
        "order": 6,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{guageName}}",
        "label": "",
        "format": "{{payload}} {{unit}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b30000",
            "#e6e600",
            "#59cb3a"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1750,
        "y": 800,
        "wires": []
    },
    {
        "id": "5b9ebdc7.4292a4",
        "type": "switch",
        "z": "cf96057a.038f88",
        "name": "Sort between capacity and currentLevel",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "capacity",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "currentLevel",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 460,
        "wires": [
            [
                "de2d130e.44ca1"
            ],
            [
                "1f692fb6.597c2",
                "d3ba4d95.5e7c5",
                "4797733c.b32cec",
                "90b7cc2d.8bb9a",
                "3da29a79.6c2996",
                "38b0392c.11c3b6",
                "1e2bcc37.54aff4",
                "2a8f1e18.ff6172"
            ]
        ]
    },
    {
        "id": "88fd24e8.13b248",
        "type": "link out",
        "z": "cf96057a.038f88",
        "name": "",
        "links": [
            "1a65f792.f1a848"
        ],
        "x": 1775,
        "y": 280,
        "wires": []
    },
    {
        "id": "1a65f792.f1a848",
        "type": "link in",
        "z": "cf96057a.038f88",
        "name": "",
        "links": [
            "88fd24e8.13b248"
        ],
        "x": 35,
        "y": 460,
        "wires": [
            [
                "311dd5e3.db3daa"
            ]
        ]
    },
    {
        "id": "311dd5e3.db3daa",
        "type": "switch",
        "z": "cf96057a.038f88",
        "name": "Only take the data from the YDEN interface",
        "property": "$source",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "YDEN",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 250,
        "y": 460,
        "wires": [
            [
                "5b9ebdc7.4292a4"
            ]
        ]
    },
    {
        "id": "de2d130e.44ca1",
        "type": "function",
        "z": "cf96057a.038f88",
        "name": "Update the capacity values for the tanks",
        "func": "if ( msg.$source.includes(flow.get(\"freshwater[0].SerialNo\")) )\n{\n    flow.set(\"freshwater[0].capacity\", msg.payload);\n}\n\nif (msg.$source.includes(flow.get(\"freshwater[1].SerialNo\")) )\n{\n    flow.set(\"freshwater[1].capacity\", msg.payload);\n}\n\nif ( msg.$source.includes(flow.get(\"freshwater[2].SerialNo\")) )\n{\n    flow.set(\"freshwater[2].capacity\", msg.payload);\n}\n\nif ( msg.$source.includes(flow.get(\"blackwater[0].SerialNo\")) )\n{\n    flow.set(\"blackwater[0].capacity\", msg.payload);\n}\n\nif ( msg.$source.includes(flow.get(\"blackwater[1].SerialNo\")) )\n{\n    flow.set(\"blackwater[1].capacity\", msg.payload);\n}\n\nif ( msg.$source.includes(flow.get(\"fuel[0].SerialNo\")) )\n{\n    flow.set(\"fuel[0].capacity\", msg.payload);\n}\n\nreturn msg;\n\npayload.updates[0].$source",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1060,
        "y": 420,
        "wires": [
            [
                "e58871e2.de06d",
                "1778073d.373059"
            ]
        ]
    },
    {
        "id": "adc95cc.cd6c7a",
        "type": "change",
        "z": "cf96057a.038f88",
        "name": "freshwater",
        "rules": [
            {
                "t": "set",
                "p": "freshwater",
                "pt": "flow",
                "to": "[{\"SerialNo\":\"0b99\",\"Name\":\"Potable 1\",\"capacity\":0},{\"SerialNo\":\"0bce\",\"Name\":\"Potable 2\",\"capacity\":0},{\"SerialNo\":\"02f8\",\"Name\":\"Potable 3\",\"capacity\":0}]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 200,
        "wires": [
            [
                "ae7c8ef5.6c48"
            ]
        ]
    },
    {
        "id": "ae7c8ef5.6c48",
        "type": "change",
        "z": "cf96057a.038f88",
        "name": "blackwater",
        "rules": [
            {
                "t": "set",
                "p": "blackwater",
                "pt": "flow",
                "to": "[{\"SerialNo\":\"ff56\",\"Name\":\"Stern Holding\",\"capacity\":0},{\"SerialNo\":\"ff65\",\"Name\":\"Bow Holding\",\"capacity\":0}]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 200,
        "wires": [
            [
                "27aecf06.f55db"
            ]
        ]
    },
    {
        "id": "27aecf06.f55db",
        "type": "change",
        "z": "cf96057a.038f88",
        "name": "fuel",
        "rules": [
            {
                "t": "set",
                "p": "fuel",
                "pt": "flow",
                "to": "[{\"SerialNo\":\"02e3\",\"Name\":\"Fuel\",\"capacity\":0}]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 200,
        "wires": [
            [
                "df82638a.273b9"
            ]
        ]
    },
    {
        "id": "89787c01.cb79a",
        "type": "comment",
        "z": "cf96057a.038f88",
        "name": "A branch that set up the static infomration, I set this up statically in the flow",
        "info": "",
        "x": 1120,
        "y": 160,
        "wires": []
    },
    {
        "id": "2da68707.b32008",
        "type": "comment",
        "z": "cf96057a.038f88",
        "name": "This could be a switch and change block,  but I found the if statements more readable.",
        "info": "",
        "x": 1070,
        "y": 380,
        "wires": []
    },
    {
        "id": "394f3b3b.e9d574",
        "type": "debug",
        "z": "cf96057a.038f88",
        "d": true,
        "name": "debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 380,
        "wires": []
    },
    {
        "id": "e58871e2.de06d",
        "type": "change",
        "z": "cf96057a.038f88",
        "d": true,
        "name": "debug inspection of change output",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "fuel",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1540,
        "y": 380,
        "wires": [
            [
                "394f3b3b.e9d574"
            ]
        ]
    },
    {
        "id": "1fecdf87.38092",
        "type": "change",
        "z": "cf96057a.038f88",
        "d": true,
        "name": " inspection of initial setup",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "fuel",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1550,
        "y": 200,
        "wires": [
            [
                "da39e040.e02c4"
            ]
        ]
    },
    {
        "id": "da39e040.e02c4",
        "type": "debug",
        "z": "cf96057a.038f88",
        "d": true,
        "name": "debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 200,
        "wires": []
    },
    {
        "id": "1f692fb6.597c2",
        "type": "debug",
        "z": "cf96057a.038f88",
        "name": "Debug point to look at the filtered value deltas",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 460,
        "wires": []
    },
    {
        "id": "5e81f82.6b7d908",
        "type": "comment",
        "z": "cf96057a.038f88",
        "name": "Just ensuring the data id from my primary data path",
        "info": "",
        "x": 230,
        "y": 420,
        "wires": []
    },
    {
        "id": "df82638a.273b9",
        "type": "function",
        "z": "cf96057a.038f88",
        "name": "locals",
        "func": "flow.set(\"locals.guagesRelative\",false)\nflow.set(\"locals.lastBadReading\",new Date(1970, 1, 2, 0, 0, 0, 0));\nflow.set(\"locals.lastGoodReading\",new Date(1970, 1, 2, 0, 0, 0, 0));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1350,
        "y": 200,
        "wires": [
            [
                "1fecdf87.38092"
            ]
        ]
    },
    {
        "id": "4797733c.b32cec",
        "type": "function",
        "z": "cf96057a.038f88",
        "name": "Generate Display",
        "func": "//which tank do we want\nDisplayWaterTank=1;\n\n//copy the flow to local variables for readbility\nDisplayWaterTank--;\ntankSerialNo = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].SerialNo\")\n\nif ( !(msg.$source.includes(tankSerialNo) )){\n    //this delta isn't for this guage.  Lets terminate the flow here.\n    msg = {};\n    node.done;\n}\nelse\n{\n    //since we have the correct tank lets pull the information local to improve readabilit\n    tankCapacity = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].capacity\")\n    tankName = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].Name\")\n\n    //set some local limits for colouring the guage different colours.  This translates is arbitary\n    seg1b=0.05;\n    seg2b=0.15; \n\n    //pull the level out of the tank from the data packet.\n    tankCurrentLevel = msg.payload; //current level of the tank\n\n    //label the guage with the name set up in the config run\n    msg.guageName = tankName;\n    \n    //guages relative - if l confuse you ;-)  The guages only change when there is an update so it might take\n    //5min to get the update\n    if (global.get(\"Guages_Relative\") == true)\n    {\n        msg.payload = (tankCurrentLevel*100).toFixed(0);\n        msg.unit=\"%\";\n        guage_min = 0\n        guage_max = 100\n        seg1= seg1b*guage_max;\n        seg2= seg2b*guage_max;\n    }\n    else\n    {\n        //guage absolute the capacity is converted to l,  this is where you gould pick another unit.\n        \n        //conversion=1; //you like cubig meters\n        conversion=1000; //liters in a cubic meter\n        //conversion=264.17; //us gallons in a cubic meter \n        \n        msg.payload = (tankCurrentLevel*tankCapacity*conversion).toFixed(0);\n        //msg.unit=\"m^3\";\n        msg.unit=\"l\";\n        //msg.unit=\"US Gal\";\n        guage_min = 0\n        guage_max = (tankCapacity*conversion).toFixed(0)\n        seg1= seg1b* guage_max;\n        seg2= seg2b*guage_max;\n    }\n    \n    //set th\n    msg.ui_control = {\n        \"min\":guage_min,\n        \"max\":guage_max,\n        \"seg1\":seg1,\n        \"seg2\":seg2,\n        \"options\":{\"levelColors\":[\"#b30000\", \"#e6e600\", \"#59cb3a\"]}\n    }\n    \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 600,
        "wires": [
            [
                "5f6b93b6.74c0ac"
            ]
        ]
    },
    {
        "id": "cec864ad.eba798",
        "type": "switch",
        "z": "cf96057a.038f88",
        "name": "Debug filter",
        "property": "payload.updates[0].values[0].path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1210,
        "y": 240,
        "wires": [
            [
                "4f18d0b3.155d6"
            ]
        ]
    },
    {
        "id": "1778073d.373059",
        "type": "switch",
        "z": "cf96057a.038f88",
        "d": true,
        "name": "Debug filter",
        "property": "payload.updates[0].values[0].path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "fuel",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 420,
        "wires": [
            [
                "9141b092.523e"
            ]
        ]
    },
    {
        "id": "9141b092.523e",
        "type": "debug",
        "z": "cf96057a.038f88",
        "d": true,
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 420,
        "wires": []
    },
    {
        "id": "90b7cc2d.8bb9a",
        "type": "function",
        "z": "cf96057a.038f88",
        "name": "Generate Display",
        "func": "//which tank do we want\nDisplayFuelTank=1;\n\n//copy the flow to local variables for readbility\nDisplayFuelTank--;\ntankSerialNo = flow.get(\"fuel[\"+DisplayFuelTank.toString(10)+\"].SerialNo\")\n\nif ( !(msg.$source.includes(tankSerialNo) )){\n    //this delta isn't for this guage.  Lets terminate the flow here.\n    msg = {};\n    node.done;\n}\nelse\n{\n    tankCapacity = flow.get(\"fuel[\"+DisplayFuelTank.toString(10)+\"].capacity\")\n    tankName = flow.get(\"fuel[\"+DisplayFuelTank.toString(10)+\"].Name\")\n    //set some local limits for colouring the guage different colours\n    seg1b=0.05;\n    seg2b=0.15; \n    tankCurrentLevel = msg.payload; //current level of the tank\n    msg.guageName = tankName;\n    if (global.get(\"Guages_Relative\") == true)\n    {\n        msg.payload = (tankCurrentLevel*100).toFixed(0);\n        msg.unit=\"%\";\n        guage_min = 0\n        guage_max = 100\n        seg1= seg1b*guage_max;\n        seg2= seg2b*guage_max;\n    }\n    else\n    {\n        msg.payload = (tankCurrentLevel*tankCapacity*1000).toFixed(0);\n        msg.unit=\"l\";\n        guage_min = 0\n        guage_max = (tankCapacity*1000).toFixed(0)\n        seg1= seg1b* guage_max;\n        seg2= seg2b*guage_max;\n    }\n    msg.ui_control = {\n        \"min\":guage_min,\n        \"max\":guage_max,\n        \"seg1\":seg1,\n        \"seg2\":seg2,\n        \"options\":{\"levelColors\":[\"#b30000\", \"#e6e600\", \"#59cb3a\"]}\n    }\n    \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 800,
        "wires": [
            [
                "a0adb310.f6701"
            ]
        ]
    },
    {
        "id": "3da29a79.6c2996",
        "type": "function",
        "z": "cf96057a.038f88",
        "name": "Generate Display",
        "func": "//which tank do we want\nDisplayWaterTank=2;\n\n//copy the flow to local variables for readbility\nDisplayWaterTank--;\ntankSerialNo = flow.get(\"blackwater[\"+DisplayWaterTank.toString(10)+\"].SerialNo\")\n\nif ( !(msg.$source.includes(tankSerialNo) )){\n    //this delta isn't for this guage.  Lets terminate the flow here.\n    msg = {};\n    node.done;\n}\nelse\n{\n    tankCapacity = flow.get(\"blackwater[\"+DisplayWaterTank.toString(10)+\"].capacity\")\n    tankName = flow.get(\"blackwater[\"+DisplayWaterTank.toString(10)+\"].Name\")\n    //set some local limits for colouring the guage different colours\n    seg1b=0.05;\n    seg2b=0.15; \n    tankCurrentLevel = msg.payload; //current level of the tank\n    msg.guageName = tankName;\n    if (global.get(\"Guages_Relative\") == true)\n    {\n        msg.payload = (tankCurrentLevel*100).toFixed(0);\n        msg.unit=\"%\";\n        guage_min = 0\n        guage_max = 100\n        seg1= seg1b*guage_max;\n        seg2= seg2b*guage_max;\n    }\n    else\n    {\n        msg.payload = (tankCurrentLevel*tankCapacity*1000).toFixed(0);\n        msg.unit=\"l\";\n        guage_min = 0\n        guage_max = (tankCapacity*1000).toFixed(0)\n        seg1= seg1b* guage_max;\n        seg2= seg2b*guage_max;\n    }\n    msg.ui_control = {\n        \"min\":guage_min,\n        \"max\":guage_max,\n        \"seg1\":seg1,\n        \"seg2\":seg2,\n        \"options\":{\"levelColors\":[\"#b30000\", \"#e6e600\", \"#59cb3a\"]}\n    }\n    \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 760,
        "wires": [
            [
                "187c4a26.4a7e96"
            ]
        ]
    },
    {
        "id": "38b0392c.11c3b6",
        "type": "function",
        "z": "cf96057a.038f88",
        "name": "Generate Display",
        "func": "//which tank do we want\nDisplayWaterTank=1;\n\n//copy the flow to local variables for readbility\nDisplayWaterTank--;\ntankSerialNo = flow.get(\"blackwater[\"+DisplayWaterTank.toString(10)+\"].SerialNo\")\n\nif ( !(msg.$source.includes(tankSerialNo) )){\n    //this delta isn't for this guage.  Lets terminate the flow here.\n    msg = {};\n    node.done;\n}\nelse\n{\n    tankCapacity = flow.get(\"blackwater[\"+DisplayWaterTank.toString(10)+\"].capacity\")\n    tankName = flow.get(\"blackwater[\"+DisplayWaterTank.toString(10)+\"].Name\")\n    //set some local limits for colouring the guage different colours\n    seg1b=0.33;\n    seg2b=0.66; \n    tankCurrentLevel = msg.payload; //current level of the tank\n    msg.guageName = tankName;\n    if (global.get(\"Guages_Relative\") == true)\n    {\n        msg.payload = (tankCurrentLevel*100).toFixed(0);\n        msg.unit=\"%\";\n        guage_min = 0\n        guage_max = 100\n        seg1= seg1b*guage_max;\n        seg2= seg2b*guage_max;\n    }\n    else\n    {\n        msg.payload = (tankCurrentLevel*tankCapacity*1000).toFixed(0);\n        msg.unit=\"l\";\n        guage_min = 0\n        guage_max = (tankCapacity*1000).toFixed(0)\n        seg1= seg1b* guage_max;\n        seg2= seg2b*guage_max;\n    }\n    msg.ui_control = {\n        \"min\":guage_min,\n        \"max\":guage_max,\n        \"seg1\":seg1,\n        \"seg2\":seg2,\n        \"options\":{\"levelColors\":[\"#59cb3a\", \"#e6e600\", \"#b30000\"]}\n    }\n    \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 720,
        "wires": [
            [
                "309a63a1.84f35c"
            ]
        ]
    },
    {
        "id": "1e2bcc37.54aff4",
        "type": "function",
        "z": "cf96057a.038f88",
        "name": "Generate Display",
        "func": "//which tank do we want\nDisplayWaterTank=3;\n\n//copy the flow to local variables for readbility\nDisplayWaterTank--;\ntankSerialNo = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].SerialNo\")\n\nif ( !(msg.$source.includes(tankSerialNo) )){\n    //this delta isn't for this guage.  Lets terminate the flow here.\n    msg = {};\n    node.done;\n}\nelse\n{\n    //since we have the correct tank lets pull the information local to improve readabilit\n    tankCapacity = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].capacity\")\n    tankName = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].Name\")\n\n    //set some local limits for colouring the guage different colours.  This translates is arbitary\n    seg1b=0.05;\n    seg2b=0.15; \n\n    //pull the level out of the tank from the data packet.\n    tankCurrentLevel = msg.payload; //current level of the tank\n\n    //label the guage with the name set up in the config run\n    msg.guageName = tankName;\n    \n    //guages relative - if l confuse you ;-)  The guages only change when there is an update so it might take\n    //5min to get the update\n    if (global.get(\"Guages_Relative\") == true)\n    {\n        msg.payload = (tankCurrentLevel*100).toFixed(0);\n        msg.unit=\"%\";\n        guage_min = 0\n        guage_max = 100\n        seg1= seg1b*guage_max;\n        seg2= seg2b*guage_max;\n    }\n    else\n    {\n        //guage absolute the capacity is converted to l,  this is where you gould pick another unit.\n        \n        //conversion=1; //you like cubig meters\n        conversion=1000; //liters in a cubic meter\n        //conversion=264.17; //us gallons in a cubic meter \n        \n        msg.payload = (tankCurrentLevel*tankCapacity*conversion).toFixed(0);\n        //msg.unit=\"m^3\";\n        msg.unit=\"l\";\n        //msg.unit=\"US Gal\";\n        guage_min = 0\n        guage_max = (tankCapacity*conversion).toFixed(0)\n        seg1= seg1b* guage_max;\n        seg2= seg2b*guage_max;\n    }\n    \n    //set th\n    msg.ui_control = {\n        \"min\":guage_min,\n        \"max\":guage_max,\n        \"seg1\":seg1,\n        \"seg2\":seg2,\n        \"options\":{\"levelColors\":[\"#b30000\", \"#e6e600\", \"#59cb3a\"]}\n    }\n    \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 680,
        "wires": [
            [
                "3a57519e.6cecbe"
            ]
        ]
    },
    {
        "id": "2a8f1e18.ff6172",
        "type": "function",
        "z": "cf96057a.038f88",
        "name": "Generate Display",
        "func": "//which tank do we want\nDisplayWaterTank=2;\n\n//copy the flow to local variables for readbility\nDisplayWaterTank--;\ntankSerialNo = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].SerialNo\")\n\nif ( !(msg.$source.includes(tankSerialNo) )){\n    //this delta isn't for this guage.  Lets terminate the flow here.\n    msg = {};\n    node.done;\n}\nelse\n{\n    //since we have the correct tank lets pull the information local to improve readabilit\n    tankCapacity = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].capacity\")\n    tankName = flow.get(\"freshwater[\"+DisplayWaterTank.toString(10)+\"].Name\")\n\n    //set some local limits for colouring the guage different colours.  This translates is arbitary\n    seg1b=0.05;\n    seg2b=0.15; \n\n    //pull the level out of the tank from the data packet.\n    tankCurrentLevel = msg.payload; //current level of the tank\n\n    //label the guage with the name set up in the config run\n    msg.guageName = tankName;\n    \n    //guages relative - if l confuse you ;-)  The guages only change when there is an update so it might take\n    //5min to get the update\n    if (global.get(\"Guages_Relative\") == true)\n    {\n        msg.payload = (tankCurrentLevel*100).toFixed(0);\n        msg.unit=\"%\";\n        guage_min = 0\n        guage_max = 100\n        seg1= seg1b*guage_max;\n        seg2= seg2b*guage_max;\n    }\n    else\n    {\n        //guage absolute the capacity is converted to l,  this is where you gould pick another unit.\n        \n        //conversion=1; //you like cubig meters\n        conversion=1000; //liters in a cubic meter\n        //conversion=264.17; //us gallons in a cubic meter \n        \n        msg.payload = (tankCurrentLevel*tankCapacity*conversion).toFixed(0);\n        //msg.unit=\"m^3\";\n        msg.unit=\"l\";\n        //msg.unit=\"US Gal\";\n        guage_min = 0\n        guage_max = (tankCapacity*conversion).toFixed(0)\n        seg1= seg1b* guage_max;\n        seg2= seg2b*guage_max;\n    }\n    \n    //set th\n    msg.ui_control = {\n        \"min\":guage_min,\n        \"max\":guage_max,\n        \"seg1\":seg1,\n        \"seg2\":seg2,\n        \"options\":{\"levelColors\":[\"#b30000\", \"#e6e600\", \"#59cb3a\"]}\n    }\n    \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 640,
        "wires": [
            [
                "da9784b0.77a498"
            ]
        ]
    },
    {
        "id": "eb3063bf.3e273",
        "type": "function",
        "z": "cf96057a.038f88",
        "name": "Check the times function - making sure readings are current",
        "func": "led_state = false; // false makes the LED red\nreading_bound = 300000; //in ms , this sets the tollerance AND lockout for bad readings.\n\n//the time of the reading\nreadingTime = flow.get(\"locals.lastGoodReading\");\n//the last bad reading\nlastBadReading = new Date(flow.get(\"locals.lastBadReading\")).getTime();\n\n//the present time acording to the node red server\n//this may drift unless all your devices are time locked. THEY ARE of course time locked.\ncurrentTime =  Date.now();\n\n//work out the time deltas\ntimeFromLastBadReading = lastBadReading - currentTime;\ntimeFromLastMeasurement = readingTime - currentTime;\n\nif ( timeFromLastBadReading <= -reading_bound){\n    \n     if ( timeFromLastMeasurement <= -reading_bound){\n         //we have a reading time out\n        led_state = false;\n        flow.set(\"locals.lastBadReading\", currentTime);\n    }\n    else\n    {\n        //all is good set the led green\n        led_state = true;\n    }\n}\nelse\n{\n   //we have seen a reading gap leave the LED on red\n    led_state = false;\n}\n\n//set the outputs\n\nmsg.payload = led_state;\n//for debug I output the time deltaa\n//msg.debug = \"Time to reading -\" + timeFromLastMeasurement.toString(10) + \"  Time to last bad reading -\" + timeFromLastBadReading.toString(10);\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 900,
        "y": 880,
        "wires": [
            [
                "4714b6f9.832118",
                "d041d224.2d5cf"
            ]
        ]
    },
    {
        "id": "d041d224.2d5cf",
        "type": "debug",
        "z": "cf96057a.038f88",
        "name": "debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 920,
        "wires": []
    },
    {
        "id": "4714b6f9.832118",
        "type": "ui_led",
        "z": "cf96057a.038f88",
        "order": 1,
        "group": "78118053.d1a01",
        "width": 0,
        "height": 0,
        "label": "Reading recent ",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1750,
        "y": 880,
        "wires": []
    },
    {
        "id": "80fe742f.d5b818",
        "type": "inject",
        "z": "cf96057a.038f88",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 880,
        "wires": [
            [
                "eb3063bf.3e273"
            ]
        ]
    },
    {
        "id": "89e06e9c.8bbec",
        "type": "ui_switch",
        "z": "cf96057a.038f88",
        "name": "",
        "label": "Relative?",
        "tooltip": "1",
        "group": "78118053.d1a01",
        "order": 2,
        "width": "3",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "1",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "x": 660,
        "y": 1020,
        "wires": [
            [
                "41a80092.2a951"
            ]
        ]
    },
    {
        "id": "41a80092.2a951",
        "type": "function",
        "z": "cf96057a.038f88",
        "name": "Process Buttons",
        "func": "global.set(\"Guages_Relative\",msg.payload);\n\nnode.done();\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 860,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "77dd557f.b2e12c",
        "type": "inject",
        "z": "cf96057a.038f88",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1020,
        "wires": [
            [
                "c368d7ea.77c968"
            ]
        ]
    },
    {
        "id": "c368d7ea.77c968",
        "type": "function",
        "z": "cf96057a.038f88",
        "name": "Process Buttons",
        "func": "global.set(\"Guages_Relative\",false);\nglobal.set(\"Power_Guages_Relative\",false);\nmsg.ui_control = {onicon:\"check\",oncolor:\"yellow\",officon:\"close\",offcolor:\"grey\"};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 440,
        "y": 1020,
        "wires": [
            [
                "89e06e9c.8bbec"
            ]
        ]
    },
    {
        "id": "c6bf03e.9402f",
        "type": "signalk-subscribe",
        "z": "cf96057a.038f88",
        "name": "",
        "mode": "sendAll",
        "flatten": true,
        "context": "vessels.self",
        "path": "tanks.*",
        "source": "",
        "period": "6000",
        "x": 120,
        "y": 280,
        "wires": [
            [
                "63cc2dcb.d9b554"
            ]
        ]
    },
    {
        "id": "6cb1f8a5.adc748",
        "type": "inject",
        "z": "cf96057a.038f88",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "adc95cc.cd6c7a"
            ]
        ]
    },
    {
        "id": "84e42de6.43255",
        "type": "debug",
        "z": "cf96057a.038f88",
        "name": "debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 520,
        "wires": []
    },
    {
        "id": "5efb96f.ad0a568",
        "type": "ui_group",
        "name": "Potable Water",
        "tab": "147c3c11.3cdf74",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c516dbf3.170108",
        "type": "ui_group",
        "name": "Black Water",
        "tab": "147c3c11.3cdf74",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "4731fe37.3174b",
        "type": "ui_group",
        "name": "Fuel ",
        "tab": "147c3c11.3cdf74",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "78118053.d1a01",
        "type": "ui_group",
        "name": "Status",
        "tab": "147c3c11.3cdf74",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "147c3c11.3cdf74",
        "type": "ui_tab",
        "name": "Tanks",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    }
]